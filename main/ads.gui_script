local dirtylarry = require "dirtylarry/dirtylarry"

local MAX_LOG_LINES = 35

--log logic
local gprint = print
local log = {}
local text = ""
_G.print = function(...)
    gprint(...)
    local args = {...}
    local num = #log+1
    log[num] = "--"
    for k, v in pairs(args) do
        log[num] = log[num] .. tostring(v) .. " "
    end
    log[num] = log[num] .. "\n"
    text = ""
    if num > MAX_LOG_LINES then
        table.remove(log, 1)
    end
    for k, v in pairs(log) do
        text = text .. v
    end
end

function update()
    gui.set_text(gui.get_node("console"), text)
end
-- end log logic

local function update_ui(self)
    gui.set_enabled(gui.get_node("inited"), self.initialized)
    gui.set_enabled(gui.get_node("initialization/larrybutton"), not self.initialized)
    if self.ad_type then
        gui.set_enabled(gui.get_node("load_ad/larrybutton"), true)
        gui.set_enabled(gui.get_node("hide_ad/larrybutton"), false)
        gui.set_enabled(gui.get_node("destroy_ad/larrybutton"), false)
        if self.ad_type == applovin.MSG_INTERSTITIAL then
            gui.set_enabled(gui.get_node("show_ad/larrybutton"), applovin.is_interstitial_loaded())
        elseif self.ad_type == applovin.MSG_REWARDED then
            gui.set_enabled(gui.get_node("show_ad/larrybutton"), applovin.is_rewarded_loaded())
        elseif self.ad_type == applovin.MSG_BANNER then
            local is_banner_loaded = applovin.is_banner_loaded()
            gui.set_enabled(gui.get_node("show_ad/larrybutton"), is_banner_loaded)
            gui.set_enabled(gui.get_node("hide_ad/larrybutton"), is_banner_loaded)
            gui.set_enabled(gui.get_node("destroy_ad/larrybutton"), is_banner_loaded)
        end
    else
        gui.set_enabled(gui.get_node("load_ad/larrybutton"), false)
        gui.set_enabled(gui.get_node("show_ad/larrybutton"), false)
        gui.set_enabled(gui.get_node("hide_ad/larrybutton"), false)
        gui.set_enabled(gui.get_node("destroy_ad/larrybutton"), false)
    end
end

local function set_block_height(height)
    -- use banner height in gui
    local screen_width, screen_height = window.get_size()
    local settings_height = tonumber(sys.get_config("display.height"))
    local mult = screen_height/settings_height
    local height_b_node = gui.get_node("height_b")
    local size = gui.get_size(height_b_node)
    size.y = height/mult
    gui.set_size(height_b_node, size)
end

local function applovin_callback(self, message_id, message)
    pprint(message_id, message)
    if message_id == applovin.MSG_INITIALIZATION then
        print("MSG_INITIALIZATION")
        self.initialized = true

    elseif message_id == applovin.MSG_INTERSTITIAL then
        if message.event == applovin.EVENT_CLOSED then
            print("EVENT_CLOSED: Interstitial AD closed")
        elseif message.event == applovin.EVENT_CLICKED then
            print("EVENT_CLICKED: Interstitial AD clicked")
        elseif message.event == applovin.EVENT_FAILED_TO_SHOW then
            print("EVENT_FAILED_TO_SHOW: Interstitial AD failed to show\nCode: "..message.code.."\nError: "..message.error)
        elseif message.event == applovin.EVENT_OPENING then
            -- on android this event fire only when ADS activity closed =(
            print("EVENT_OPENING: Interstitial AD is opening")
        elseif message.event == applovin.EVENT_FAILED_TO_LOAD then
            print("EVENT_FAILED_TO_LOAD: Interstitial AD failed to load\nCode: "..message.code.."\nError: "..message.error)
        elseif message.event == applovin.EVENT_LOADED then
            print("EVENT_LOADED: Interstitial AD loaded")
        elseif message.event == applovin.EVENT_NOT_LOADED then
            print("EVENT_NOT_LOADED: can't call show_interstitial() before EVENT_LOADED\nError: "..message.error)
        end

    elseif message_id == applovin.MSG_REWARDED then
        if message.event == applovin.EVENT_CLOSED then
            print("EVENT_CLOSED: Rewarded AD closed")
        elseif message.event == applovin.EVENT_FAILED_TO_SHOW then
            print("EVENT_FAILED_TO_SHOW: Rewarded AD failed to show\nCode: "..message.code.."\nError: "..message.error)
        elseif message.event == applovin.EVENT_OPENING then
            -- on android this event fire only when ADS activity closed =(
            print("EVENT_OPENING: Rewarded AD is opening")
        elseif message.event == applovin.EVENT_FAILED_TO_LOAD then
            print("EVENT_FAILED_TO_LOAD: Rewarded AD failed to load\nCode: "..message.code.."\nError: "..message.error)
        elseif message.event == applovin.EVENT_LOADED then
            print("EVENT_LOADED: Rewarded AD loaded")
        elseif message.event == applovin.EVENT_NOT_LOADED then
            print("EVENT_NOT_LOADED: can't call show_rewarded() before EVENT_LOADED\nError: "..message.error)
        elseif message.event == applovin.EVENT_EARNED_REWARD then
            print("EVENT_EARNED_REWARD: Reward: " .. tostring(message.amount) .. " " .. tostring(message.type))
        end

    elseif message_id == applovin.MSG_BANNER then
        if message.event == applovin.EVENT_LOADED then
            print("EVENT_LOADED: Banner AD loaded.")
        elseif message.event == applovin.EVENT_OPENING then
            print("EVENT_OPENING: Banner AD is opening")
        elseif message.event == applovin.EVENT_FAILED_TO_LOAD then
            print("EVENT_FAILED_TO_LOAD: Banner AD failed to load\nCode: "..message.code.."\nError: "..message.error)
        elseif message.event == applovin.EVENT_FAILED_TO_SHOW then
            print("EVENT_FAILED_TO_SHOW: Banner AD failed to show\nCode: "..message.code.."\nError: "..message.error)
        elseif message.event == applovin.EVENT_EXPANDED then
            print("EVENT_EXPANDED: Banner AD expanded")
        elseif message.event == applovin.EVENT_COLLAPSED then
            print("EVENT_COLLAPSED: Banner AD coppalsed")
        elseif message.event == applovin.EVENT_CLICKED then
            print("EVENT_CLICKED: Banner AD loaded")
        elseif message.event == applovin.EVENT_CLOSED then
            print("EVENT_CLOSED: Banner AD closed")
        elseif message.event == applovin.EVENT_DESTROYED then
            print("EVENT_DESTROYED: Banner AD destroyed")
        elseif message.event == applovin.EVENT_NOT_LOADED then
            print("EVENT_NOT_LOADED: can't call show_banner() before EVENT_LOADED\nError: "..message.error)
        end
    end

    update_ui(self)
end

function init(self)
    msg.post(".", "acquire_input_focus")

    self.interstitial_ad_unit = "e0cb5c7697b8a887"
    self.rewarded_ad_unit = "6c28447a5ce258e5"
    self.banner_ad_unit = "3e594186a1afe9cf"
    self.mrec_ad_unit = "acb492346359581d"
    
    self.show_pos = 1
    self.banner_positions = {
        "POS_BOTTOM_CENTER",
        "POS_BOTTOM_LEFT",
        "POS_BOTTOM_RIGHT",
        "POS_NONE",
        "POS_TOP_LEFT",
        "POS_TOP_CENTER",
        "POS_TOP_RIGHT",
        "POS_CENTER"
    }

    self.show_size = 1
    self.banner_sizes = {
        "SIZE_BANNER",
        "SIZE_LEADER",
        "SIZE_MREC"
    }

    if applovin then
        applovin.set_callback(applovin_callback)
    end
    update_ui(self)
end

function on_input(self, action_id, action)
    if not applovin then
        return
    end
    
    local prev_type = self.ad_type

    dirtylarry:button("initialization", action_id, action, function ()
        applovin.initialize()
    end)
    
    self.ad_type = dirtylarry:radio("ad_type_interstitial", action_id, action, applovin.MSG_INTERSTITIAL, self.ad_type)
    self.ad_type = dirtylarry:radio("ad_type_rewarded", action_id, action, applovin.MSG_REWARDED, self.ad_type)
    self.ad_type = dirtylarry:radio("ad_type_banner", action_id, action, applovin.MSG_BANNER, self.ad_type)
    
    if prev_type ~= self.ad_type then
        update_ui(self)
    end
    
    dirtylarry:button("load_ad", action_id, action, function ()
        if self.ad_type == 0 then
        elseif self.ad_type == applovin.MSG_INTERSTITIAL then
            print("applovin.load_interstitial()")
            applovin.load_interstitial(self.interstitial_ad_unit)
        elseif self.ad_type == applovin.MSG_REWARDED then
            print("applovin.load_rewarded()")
            applovin.load_rewarded(self.rewarded_ad_unit)
        elseif self.ad_type == applovin.MSG_BANNER then
            local is_mrec = (self.show_size == 3)
            local ad_unit = is_mrec and self.mrec_ad_unit or self.banner_ad_unit
            local ad_size_name = self.banner_sizes[self.show_size]
            print("applovin.load_banner('"..ad_unit.."', applovin."..ad_size_name..")")
            
            local ad_size = applovin[ad_size_name]
            applovin.load_banner(ad_unit, ad_size)
            self.show_size = self.show_size + 1
            if self.show_size > #self.banner_sizes then
                self.show_size = 1
            end
        end
    end)

    if gui.is_enabled(gui.get_node("show_ad/larrybutton")) then
        dirtylarry:button("show_ad", action_id, action, function ()
            if self.ad_type == 0 then
            elseif self.ad_type == applovin.MSG_INTERSTITIAL then
                print("applovin.show_interstitial()")
                applovin.show_interstitial()
            elseif self.ad_type == applovin.MSG_REWARDED then
                print("applovin.show_rewarded()")
                applovin.show_rewarded()
            elseif self.ad_type == applovin.MSG_BANNER then
                print("applovin.show_banner( applovin."..self.banner_positions[self.show_pos]..")")
                applovin.show_banner(applovin[self.banner_positions[self.show_pos]])
                self.show_pos = self.show_pos + 1
                if self.show_pos > #self.banner_positions then
                    self.show_pos = 1
                end
            end
        end)
    end
    
    if gui.is_enabled(gui.get_node("hide_ad/larrybutton")) then
        dirtylarry:button("hide_ad", action_id, action, function ()
            if self.ad_type == applovin.MSG_BANNER then
                print("applovin.hide_banner()")
                applovin.hide_banner()
            end
        end)
    end

    if gui.is_enabled(gui.get_node("destroy_ad/larrybutton")) then
        dirtylarry:button("destroy_ad", action_id, action, function ()
            if self.ad_type == applovin.MSG_BANNER then
                print("applovin.destroy_banner()")
                applovin.destroy_banner()
            end
        end)
    end

end

